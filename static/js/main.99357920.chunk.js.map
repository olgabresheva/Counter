{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","counterByOne","setCounterByOne","counterByTen","setCounterByTen","counterByN","setCounterByN","getRandomInt","max","Math","floor","random","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAgEeA,MA7Df,WAAgB,IAAD,EAE6BC,mBAAS,GAFtC,mBAEJC,EAFI,KAEUC,EAFV,OAG6BF,mBAAS,GAHtC,mBAGJG,EAHI,KAGUC,EAHV,OAIyBJ,mBAAS,GAJlC,mBAIJK,EAJI,KAIQC,EAJR,KAsBLC,EAAe,SAAAC,GACjB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAiBjD,OACI,yBAAKI,UAAU,OAEX,4BACA,4BAAQC,QAlCO,WACnB,OAAOX,EAAgBD,EAAe,KAiClC,aACA,8BAAOA,GACP,4BAAQY,QAxCM,WAClB,OAAOX,EAAgBD,EAAe,KAuClC,YACA,6BACA,4BAAQY,QA9BO,WACnB,OAAOT,EAAgBD,EAAe,MA6BlC,aACA,8BAAOA,GACP,4BAAQU,QApCM,WAClB,OAAOT,EAAgBD,EAAe,MAmClC,YACA,6BACA,4BAAQU,QAtBK,WACjB,OAAOP,EAAcD,EAAaE,EAAa,OAqB3C,WACA,8BAAOF,GACP,4BAAQQ,QA5BI,WAChB,OAAOP,EAAcD,EAAaE,EAAa,OA2B3C,UACA,6BACA,4BAAQM,QAtBC,WACbX,EAAgB,GAChBE,EAAgB,GAChBE,EAAc,KAmBV,WC/CQQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99357920.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n\n    const [counterByOne, setCounterByOne] = useState(0);\n    const [counterByTen, setCounterByTen] = useState(0);\n    const [counterByN, setCounterByN] = useState(0);\n\n    const increaseByOne = () => {\n        return setCounterByOne(counterByOne + 1);\n    }\n\n    const descreaseByOne = () => {\n        return setCounterByOne(counterByOne - 1);\n    }\n\n    const increaseByTen = () => {\n        return setCounterByTen(counterByTen + 10);\n    }\n\n    const descreaseByTen = () => {\n        return setCounterByTen(counterByTen - 10);\n    }\n\n    const getRandomInt = max => {\n        return Math.floor(Math.random() * Math.floor(max));\n    };\n\n    const increaseByN = () => {\n        return setCounterByN(counterByN + getRandomInt(11));\n    }\n\n    const descreaseByN = () => {\n        return setCounterByN(counterByN - getRandomInt(11));\n    }\n\n    const clearAll = () => {\n        setCounterByOne(0);\n        setCounterByTen(0);\n        setCounterByN(0);\n    }\n\n    return (\n        <div className=\"App\">\n\n            <p/>\n            <button onClick={descreaseByOne}>Minus One</button>\n            <span>{counterByOne}</span>\n            <button onClick={increaseByOne}>Plus One</button>\n            <hr/>\n            <button onClick={descreaseByTen}>Minus Ten</button>\n            <span>{counterByTen}</span>\n            <button onClick={increaseByTen}>Plus Ten</button>\n            <hr/>\n            <button onClick={descreaseByN}>Minus N</button>\n            <span>{counterByN}</span>\n            <button onClick={increaseByN}>Plus N</button>\n            <hr/>\n            <button onClick={clearAll}>Reset</button>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}